openapi: 3.0.3
info:
  title: Car Project API
  description: |
    API documentation for the Car Project. This API provides endpoints for managing cars, 
    their engines, and brands. It includes features like car recommendations and brand statistics.
  version: 1.0.0
  contact:
    name: Car Project Support
servers:
  - url: http://localhost:8000
    description: Local development server
tags:
  - name: Cars
    description: Operations about cars
  - name: Engines
    description: Operations about car engines
  - name: Brands
    description: Operations about car brands

paths:
  /api/cars/:
    get:
      tags:
        - Cars
      summary: List all cars
      description: Returns a paginated list of all cars with basic information
      parameters:
        - name: search
          in: query
          description: Search cars by name or brand name
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarList'
    post:
      tags:
        - Cars
      summary: Create a new car
      description: Add a new car to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarForm'
      responses:
        '303':
          description: Car created successfully, redirects to the car list
          headers:
            Location:
              schema:
                type: string
              description: URL of the car list

  /api/cars/{slug}/:
    parameters:
      - name: slug
        in: path
        description: Slug of the car
        required: true
        schema:
          type: string
    get:
      tags:
        - Cars
      summary: Get car by slug
      description: Returns detailed information about a specific car
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDetail'
        '404':
          description: Car not found
    put:
      tags:
        - Cars
      summary: Update car
      description: Update an existing car's information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarForm'
      responses:
        '200':
          description: Car updated successfully
        '404':
          description: Car not found
    delete:
      tags:
        - Cars
      summary: Delete car
      description: Delete an existing car
      responses:
        '204':
          description: Car deleted successfully
        '404':
          description: Car not found

  /api/cars/{slug}/recommendation/:
    parameters:
      - name: slug
        in: path
        description: Slug of the car
        required: true
        schema:
          type: string
    get:
      tags:
        - Cars
      summary: Get car recommendations
      description: |
        Returns similar cars based on:
        - Similar performance characteristics
        - Matching price range
        - Common brand
        - Shared tags
        
        This endpoint helps users discover similar cars based on their interests
        through extensive use of aggregations and annotations.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarList'
        '404':
          description: Car not found

  /api/cars/{car_slug}/engines/:
    parameters:
      - name: car_slug
        in: path
        description: Slug of the car
        required: true
        schema:
          type: string
    get:
      tags:
        - Engines
      summary: List car engines
      description: Returns a list of engines for a specific car, ordered by ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Engine'
        '404':
          description: Car not found
    post:
      tags:
        - Engines
      summary: Add engine to car
      description: Add a new engine to a specific car
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Engine'
      responses:
        '303':
          description: Engine added successfully, redirects to engines list
          headers:
            Location:
              schema:
                type: string
              description: URL of the engines list
        '404':
          description: Car not found

  /api/cars/{car_slug}/engines/{engine_id}/:
    parameters:
      - name: car_slug
        in: path
        description: Slug of the car
        required: true
        schema:
          type: string
      - name: engine_id
        in: path
        description: ID of the engine
        required: true
        schema:
          type: integer
    get:
      tags:
        - Engines
      summary: Get engine by ID
      description: Returns detailed information about a specific engine
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Engine'
        '404':
          description: Engine or car not found
    put:
      tags:
        - Engines
      summary: Update engine
      description: Update an existing engine's information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Engine'
      responses:
        '200':
          description: Engine updated successfully
        '404':
          description: Engine or car not found
    delete:
      tags:
        - Engines
      summary: Delete engine
      description: Delete an existing engine
      responses:
        '204':
          description: Engine deleted successfully
        '404':
          description: Engine or car not found

  /api/brands/{slug}/:
    parameters:
      - name: slug
        in: path
        description: Slug of the brand
        required: true
        schema:
          type: string
    get:
      tags:
        - Brands
      summary: Get brand by slug
      description: Returns detailed information about a specific brand including statistics
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDetail'
        '404':
          description: Brand not found

components:
  schemas:
    CarList:
      type: object
      properties:
        url:
          type: string
          format: uri
        name:
          type: string
        brand:
          type: string
        price:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    CarDetail:
      type: object
      properties:
        name:
          type: string
        brand:
          type: string
        year:
          type: integer
          minimum: 1900
          maximum: 2100
        price:
          type: string
        seats:
          type: string
          maxLength: 10
        performance:
          $ref: '#/components/schemas/Performance'
        engines:
          type: array
          items:
            type: string
        fuel_types:
          type: array
          items:
            type: string

    CarForm:
      type: object
      required:
        - name
        - brand
      properties:
        url:
          type: string
          format: uri
        id:
          type: integer
        name:
          type: string
          maxLength: 100
        brand:
          type: string
        year:
          type: integer
          minimum: 1900
          maximum: 2100
          default: 2024
        fuel_type:
          type: array
          items:
            type: string
            enum: [P, D, E, H, C, X]
        price_min:
          type: integer
          minimum: 0
        price_max:
          type: integer
          minimum: 0
        seats:
          type: string
          maxLength: 10
        performance:
          $ref: '#/components/schemas/Performance'

    Performance:
      type: object
      properties:
        top_speed:
          type: integer
          minimum: 0
          maximum: 1000
          description: Unit: km/h
        acceleration_min:
          type: number
          format: float
          minimum: 0
          maximum: 30
          description: Unit: seconds
        acceleration_max:
          type: number
          format: float
          minimum: 0
          maximum: 30
          description: Unit: seconds

    Engine:
      type: object
      properties:
        id:
          type: integer
        cylinder_layout:
          type: string
          enum: [I, V, F, W, R]
          description: |
            - I: Inline/Straight
            - V: V
            - F: Flat/Boxer
            - W: W
            - R: Rotary/Wankel
        cylinder_count:
          type: integer
          minimum: 1
        aspiration:
          type: string
          enum: [T, S, W, Q, N]
          description: |
            - T: Turbocharged
            - S: Supercharged
            - W: Twin Turbo
            - Q: Quad Turbo
            - N: Naturally Aspirated
        engine_capacity:
          type: integer
          minimum: 0
          description: Unit: cc
        battery_capacity:
          type: number
          format: float
          minimum: 0
          description: Unit: kWh
        horsepower:
          type: integer
          minimum: 0
          description: Unit: hp
        torque:
          type: integer
          minimum: 0
          description: Unit: Nm

    Tag:
      type: object
      properties:
        category:
          type: string
          enum:
            - Brand
            - Fuel Type
            - Engine
            - Seats
            - Price Range
            - Displacement
            - Performance Metrics
        value:
          type: string

    Brand:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 100

    BrandDetail:
      allOf:
        - $ref: '#/components/schemas/Brand'
        - type: object
          properties:
            statistics:
              type: object
              properties:
                total_cars:
                  type: integer
                average_price:
                  type: number
                  format: float
                average_top_speed:
                  type: number
                  format: float
                average_acceleration:
                  type: number
                  format: float
                popular_engines:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      count:
                        type: integer
                popular_tags:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      count:
                        type: integer
