openapi: 3.0.3
info:
  title: Car Project API
  description: |
    API documentation for the Car Project. This API provides endpoints for managing cars, 
    their engines, and brands. It includes features like car recommendations and brand statistics.
  version: 1.0.0
  contact:
    name: Car Project Support
servers:
  - url: http://localhost:8000
    description: Local development server
tags:
  - name: Cars
    description: Operations about cars
  - name: Engines
    description: Operations about car engines
  - name: Brands
    description: Operations about car brands

paths:
  /api/cars/:
    get:
      tags:
        - Cars
      summary: List all cars
      description: Returns a list of all cars with basic information
      parameters:
        - name: search
          in: query
          description: Search cars by name or brand name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarList'
    post:
      tags:
        - Cars
      summary: Create a new car
      description: Add a new car to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarForm'
      responses:
        '303':
          description: Car created successfully, redirects to the car list
          headers:
            Location:
              schema:
                type: string
              description: URL of the car list

  /api/cars/{slug}/:
    get:
      tags:
        - Cars
      summary: Get car by slug
      description: Returns detailed information about a specific car
      parameters:
        - name: slug
          in: path
          description: Slug of the car
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDetail'
        '404':
          description: Car not found
    put:
      tags:
        - Cars
      summary: Update car
      description: Update an existing car's information
      parameters:
        - name: slug
          in: path
          description: Slug of the car
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarForm'
      responses:
        '200':
          description: Car updated successfully
        '404':
          description: Car not found
    delete:
      tags:
        - Cars
      summary: Delete car
      description: Delete an existing car
      parameters:
        - name: slug
          in: path
          description: Slug of the car
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Car deleted successfully
        '404':
          description: Car not found

  /api/cars/{slug}/recommendation/:
    get:
      tags:
        - Cars
      summary: Get car recommendations
      description: Returns similar cars based on the specified car's attributes
      parameters:
        - name: slug
          in: path
          description: Slug of the car
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarList'
        '404':
          description: Car not found

  /api/cars/{car_slug}/engines/:
    get:
      tags:
        - Engines
      summary: List car engines
      description: Returns a list of engines for a specific car
      parameters:
        - name: car_slug
          in: path
          description: Slug of the car
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Engine'
        '404':
          description: Car not found
    post:
      tags:
        - Engines
      summary: Add engine to car
      description: Add a new engine to a specific car
      parameters:
        - name: car_slug
          in: path
          description: Slug of the car
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Engine'
      responses:
        '201':
          description: Engine added successfully
        '404':
          description: Car not found

  /api/brands/:
    get:
      tags:
        - Brands
      summary: List all brands
      description: Returns a list of all car brands
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Brand'

  /api/brands/{slug}/:
    get:
      tags:
        - Brands
      summary: Get brand by slug
      description: Returns detailed information about a specific brand including statistics
      parameters:
        - name: slug
          in: path
          description: Slug of the brand
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDetail'
        '404':
          description: Brand not found

components:
  schemas:
    CarList:
      type: object
      properties:
        slug:
          type: string
          example: "tesla-model-3"
        name:
          type: string
          example: "Tesla Model 3"
        brand:
          type: string
          example: "Tesla"
        image_url:
          type: string
          format: uri
          example: "https://example.com/images/tesla-model-3.jpg"

    CarDetail:
      type: object
      properties:
        slug:
          type: string
          example: "tesla-model-3"
        name:
          type: string
          example: "Tesla Model 3"
        brand:
          $ref: '#/components/schemas/Brand'
        description:
          type: string
          example: "All-electric sedan with impressive range"
        engines:
          type: array
          items:
            $ref: '#/components/schemas/Engine'
        tags:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              category:
                type: string
        performance:
          type: object
          properties:
            acceleration:
              type: number
              format: float
            top_speed:
              type: number
              format: float

    CarForm:
      type: object
      required:
        - name
        - brand
      properties:
        name:
          type: string
          example: "Tesla Model 3"
        brand:
          type: string
          example: "tesla"
        description:
          type: string
        performance:
          type: object
          properties:
            acceleration:
              type: number
            top_speed:
              type: number
        tags:
          type: array
          items:
            type: string

    Engine:
      type: object
      required:
        - name
        - power
      properties:
        name:
          type: string
          example: "Dual Motor AWD"
        power:
          type: number
          format: float
          example: 346
        torque:
          type: number
          format: float
          example: 510
        displacement:
          type: number
          format: float
          example: null

    Brand:
      type: object
      properties:
        slug:
          type: string
          example: "tesla"
        name:
          type: string
          example: "Tesla"
        country:
          type: string
          example: "United States"
        founded_year:
          type: integer
          example: 2003

    BrandDetail:
      allOf:
        - $ref: '#/components/schemas/Brand'
        - type: object
          properties:
            statistics:
              type: object
              properties:
                total_cars:
                  type: integer
                  example: 5
                average_power:
                  type: number
                  format: float
                  example: 450.5
                price_range:
                  type: object
                  properties:
                    min:
                      type: number
                    max:
                      type: number
